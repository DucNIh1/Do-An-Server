generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid()) @db.Uuid
  email            String         @unique
  password         String?
  name             String
  googleId         String?        @unique
  avatar           String?
  role             Role           @default(STUDENT)
  isVerified       Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  comments         Comment[]
  Like             Like[]
  messagesReceived Message[]      @relation("MessageReceiver")
  messagesSent     Message[]      @relation("MessageSender")
  notifications    Notification[]
  posts            Post[]
}

model Major {
  id    String @id @default(uuid()) @db.Uuid
  code  String @unique
  name  String
  posts Post[]
}


model Post {
  id           String    @id @default(uuid()) @db.Uuid
  title        String
  content      String
  teaser       String?    
  isFromSchool Boolean   @default(false)
  isFeatured   Boolean   @default(false)
  authorId     String    @db.Uuid
  majorId      String?   @db.Uuid
  status       PostStatus  @default(pending)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  comments     Comment[]
  likes        Like[]
  author       User      @relation(fields: [authorId], references: [id])
  major        Major?    @relation(fields: [majorId], references: [id])

  images       Image[]
}


model Comment {
  id            String         @id @default(uuid()) @db.Uuid
  text          String?
  postId        String         @db.Uuid
  authorId      String         @db.Uuid
  createdAt     DateTime       @default(now())
  author        User           @relation(fields: [authorId], references: [id])
  post          Post           @relation(fields: [postId], references: [id])
  notifications Notification[]

  Images Image[]
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Message {
  id            String         @id @default(uuid()) @db.Uuid
  text          String?
  senderId      String         @db.Uuid
  receiverId    String         @db.Uuid
  createdAt     DateTime       @default(now())
  receiver      User           @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender        User           @relation("MessageSender", fields: [senderId], references: [id])
  notifications Notification[]

  images Image[]
}

model Image {
  id          String    @id @default(uuid()) @db.Uuid
  url         String
  publicId    String
  postId      String?   @db.Uuid
  commentId   String?   @db.Uuid
  messageId   String?   @db.Uuid
  createdAt   DateTime  @default(now())
  post        Post?     @relation(fields: [postId], references: [id])
  comment     Comment?  @relation(fields: [commentId], references: [id])
  message     Message?  @relation(fields: [messageId], references: [id])
}


model Notification {
  id         String           @id @default(uuid()) @db.Uuid
  type       NotificationType
  message    String
  userId     String           @db.Uuid
  commentId  String?          @db.Uuid
  messageId  String?          @db.Uuid
  read       Boolean          @default(false)
  createdAt  DateTime         @default(now())
  comment    Comment?         @relation(fields: [commentId], references: [id])
  messageRef Message?         @relation(fields: [messageId], references: [id])
  user       User             @relation(fields: [userId], references: [id])
}

model ConsultationRequest {
  id          String        @id @default(uuid()) @db.Uuid
  fullName    String
  phoneNumber String
  content     String?
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  DONE
  REJECTED
}

enum Role {
  STUDENT
  ADVISOR
  ADMIN
}

enum NotificationType {
  COMMENT
  LIKE
  MESSAGE
}

enum PostStatus {
  draft
  pending
  verified
}
