generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(uuid()) @db.Uuid
  email               String              @unique
  password            String?
  name                String
  googleId            String?             @unique
  avatar              String?
  role                Role                @default(STUDENT)
  isVerified          Boolean             @default(false)
  isActive            Boolean             @default(true) 
  deletedAt           DateTime?      
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  comments            Comment[]
  likes               Like[]
  posts               Post[]
  messagesSent        Message[]           @relation("MessageSender")
  conversationMembers ConversationMember[]

  notificationsReceived Notification[]     @relation("NotificationsReceived") 
  notificationsCreated  Notification[]     @relation("NotificationsCreated")  
}



model Major {
  id    String @id @default(uuid()) @db.Uuid
  code  String @unique
  isDeleted  Boolean  @default(false)
  deletedAt  DateTime?
  name  String
  posts Post[]

  ConsultationRequest ConsultationRequest[]
}


model Post {
  id           String    @id @default(uuid()) @db.Uuid
  title        String?
  content      String
  teaser       String?
  isFromSchool Boolean   @default(false)
  isFeatured   Boolean   @default(false)
  authorId     String    @db.Uuid
  majorId      String?   @db.Uuid
  status       PostStatus  @default(pending)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDeleted    Boolean     @default(false)
  deletedAt    DateTime?
  comments     Comment[]
  likes        Like[]
  author       User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  major        Major?    @relation(fields: [majorId], references: [id])

  images       Image[]

  Notification Notification[]
}


model Comment {
  id            String         @id @default(uuid()) @db.Uuid
  text          String?
  postId        String         @db.Uuid
  authorId      String         @db.Uuid
  createdAt     DateTime       @default(now())
  author        User           @relation(fields: [authorId], references: [id])
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  Images Image[]
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  createdAt DateTime @default(now())
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Conversation {
  id        String       @id @default(uuid()) @db.Uuid
  name      String?
  isGroup   Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  messages  Message[]
  members   ConversationMember[]

  Notification Notification[]
}


model ConversationMember {
  id             String        @id @default(uuid()) @db.Uuid
  userId         String        @db.Uuid
  conversationId String        @db.Uuid

  user           User          @relation(fields: [userId], references: [id])
  conversation   Conversation  @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}


model Message {
  id              String        @id @default(uuid()) @db.Uuid
  text            String?
  senderId        String        @db.Uuid
  conversationId  String        @db.Uuid
  createdAt       DateTime      @default(now())

  sender          User          @relation("MessageSender", fields: [senderId], references: [id])
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  images          Image[]
  notifications   Notification[]
}


model Image {
  id          String    @id @default(uuid()) @db.Uuid
  url         String
  publicId    String
  postId      String?   @db.Uuid
  commentId   String?   @db.Uuid
  messageId   String?   @db.Uuid
  createdAt   DateTime  @default(now())

  post        Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment     Comment?  @relation(fields: [commentId], references: [id])
  message     Message?  @relation(fields: [messageId], references: [id])
}


model Notification {
  id              String           @id @default(uuid()) @db.Uuid
  type            NotificationType
  message         String
  userId          String           @db.Uuid      
  commentId       String?          @db.Uuid
  messageId       String?          @db.Uuid
  postId          String?          @db.Uuid
  conversationId  String?          @db.Uuid
  read            Boolean          @default(false)
  createdAt       DateTime         @default(now())
  createdById     String?          @db.Uuid  

  link            String?

  comment         Comment?         @relation(fields: [commentId], references: [id])
  conversation    Conversation?    @relation(fields: [conversationId], references: [id])
  post            Post?            @relation(fields: [postId], references: [id])
  messageRef      Message?         @relation(fields: [messageId], references: [id])

  user            User             @relation("NotificationsReceived", fields: [userId], references: [id])

  createdBy       User?            @relation("NotificationsCreated", fields: [createdById], references: [id])
}


model ConsultationRequest {
  id          String        @id @default(uuid()) @db.Uuid
  fullName    String
  phoneNumber String
  status      RequestStatus @default(PENDING)
  address     String?
  email       String
  majorId   String        @db.Uuid
  major       Major       @relation(fields: [majorId], references: [id])
  birthDate  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  DONE
  REJECTED
}

enum Role {
  STUDENT
  ADVISOR
  ADMIN
}

enum NotificationType {
  COMMENT
  LIKE
  MESSAGE
  FROM_ADMIN
  CONVERSATION
}

enum PostStatus {
  draft
  pending
  verified
}
